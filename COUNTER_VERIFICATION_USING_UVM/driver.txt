class driver extends uvm_driver#(seq_item);
  `uvm_component_utils(driver)
  
  virtual count_if vif;  // Virtual interface
  
  function new(string name = "driver", uvm_component parent = null);
    super.new(name, parent);
  endfunction
  
  function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    if(!uvm_config_db#(virtual count_if)::get(this, "", "vif", vif))
      `uvm_fatal(get_type_name(), "virtual interface not set on top level");
  endfunction
  
  virtual task run_phase(uvm_phase phase);
    forever begin
      seq_item req;
      seq_item_port.get_next_item(req);
      
      // Drive the reset signal using the virtual interface
      vif.rst <= req.rst;  // Correctly driving rst via the clocking block
      `uvm_info("DRIVER", $sformatf("Driving rst: %0d", req.rst), UVM_LOW);
      
      seq_item_port.item_done();
    end
  endtask
  
endclass
