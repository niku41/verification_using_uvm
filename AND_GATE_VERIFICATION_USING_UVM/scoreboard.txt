// Define the scoreboard class extending uvm_scoreboard
class scoreboard extends uvm_scoreboard;
 `uvm_component_utils(scoreboard) // Macro to register the class with the UVM factory
 
 // Analysis import port to receive monitored sequence items
  uvm_analysis_imp #(sequence_item, scoreboard) item_collect_export;
 // Constructor
 function new(string name="scoreboard", uvm_component parent=null);
 super.new(name, parent); // Call the parent class constructor with the given name and parent
 item_collect_export = new("item_collect_export", this); // Create a new analysis import port for receiving data
 endfunction
 
 // Build phase of the scoreboard
 function void build_phase(uvm_phase phase);
 super.build_phase(phase); // Call the parent class build_phase method
 endfunction
 
 // Method to process and check received sequence items
  function void write(sequence_item req);
 $display("-------------------------------------------");
 
 // Compare the received output with the expected value
 if (req.y == req.a & req.b) begin
 // Log a match if output is the bitwise negation of input
   `uvm_info(get_type_name(), $sformatf("MATCH a=%0d, b=%0d, y=%0d", req.a, req.b, req.y), UVM_LOW);
 end else begin
 // Log a mismatch if the comparison fails
 `uvm_info(get_type_name(), $sformatf("NOT MATCH a=%0d, b=%0d, y=%0d", req.a,
req.b, req.y), UVM_LOW);
 end
 
 $display("-------------------------------------------");
 endfunction
 
endclass

